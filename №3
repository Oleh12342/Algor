import heapq
import time

# Матриця графа
graph = {
    1: [(2, 7), (3, 2), (5, 3)],
    2: [(1, 7), (4, 9), (5, 4)],
    3: [(1, 2), (4, 4), (5, 8)],
    4: [(2, 9), (3, 4), (5, 5)],
    5: [(1, 3), (2, 4), (3, 8), (4, 5)],
}

# Алгоритм Прима з підрахунком операцій та часу виконання
def prim_mst(graph):
    start_time = time.perf_counter_ns()
    operation_count = 0

    start_node = 1
    mst_cost = 0
    mst_edges = []
    visited = set()
    min_heap = [(0, start_node, None)]  # (вага, поточна вершина, попередня вершина)

    while min_heap and len(visited) < len(graph):
        weight, node, parent = heapq.heappop(min_heap)
        operation_count += 1  # операція вилучення з черги
        if node in visited:
            continue

        visited.add(node)
        if parent is not None:
            mst_edges.append((parent, node, weight))
            mst_cost += weight

        for neighbor, edge_weight in graph[node]:
            if neighbor not in visited:
                heapq.heappush(min_heap, (edge_weight, neighbor, node))
                operation_count += 1  # операція додавання в чергу

    end_time = time.perf_counter_ns()
    execution_time_ns = end_time - start_time  # час у наносекундах
    return mst_cost, mst_edges, execution_time_ns, operation_count

# Алгоритм Крускала з підрахунком операцій та часу виконання
def kruskal_mst(graph):
    start_time = time.perf_counter_ns()
    operation_count = 0

    edges = []
    for node in graph:
        for neighbor, weight in graph[node]:
            if (neighbor, node) not in edges:
                edges.append((weight, node, neighbor))
                operation_count += 1  # операція додавання ребра до списку

    edges.sort()  # сортування за вагою
    operation_count += len(edges) * 2  # приблизна кількість операцій сортування

    parent = {i: i for i in graph}
    rank = {i: 0 for i in graph}

    def find(v):
        nonlocal operation_count
        if parent[v] != v:
            parent[v] = find(parent[v])
        operation_count += 1  # операція пошуку
        return parent[v]

    def union(v1, v2):
        nonlocal operation_count
        root1, root2 = find(v1), find(v2)
        if root1 != root2:
            if rank[root1] > rank[root2]:
                parent[root2] = root1
            elif rank[root1] < rank[root2]:
                parent[root1] = root2
            else:
                parent[root2] = root1
                rank[root1] += 1
            operation_count += 1  # операція об'єднання

    mst_cost = 0
    mst_edges = []
    for weight, u, v in edges:
        if find(u) != find(v):
            union(u, v)
            mst_edges.append((u, v, weight))
            mst_cost += weight
            operation_count += 1  # операція додавання ребра в MST

    end_time = time.perf_counter_ns()
    execution_time_ns = end_time - start_time  # час у наносекундах
    return mst_cost, mst_edges, execution_time_ns, operation_count

# Виконання обох алгоритмів та виведення результатів
def main():
    # Прима
    prim_cost, prim_edges, prim_time_ns, prim_operations = prim_mst(graph)
    print("Алгоритм Прима:")
    print("Вартість MST:", prim_cost)
    print("Ребра MST:", prim_edges)
    print(f"Час виконання: {prim_time_ns} нс")
    print("Кількість операцій:", prim_operations)

    # Крускала
    kruskal_cost, kruskal_edges, kruskal_time_ns, kruskal_operations = kruskal_mst(graph)
    print("\nАлгоритм Крускала:")
    print("Вартість MST:", kruskal_cost)
    print("Ребра MST:", kruskal_edges)
    print(f"Час виконання: {kruskal_time_ns} нс")
    print("Кількість операцій:", kruskal_operations)

main()
